/* –õ–µ–Ω—Å–∫–∏–π –ö–∏—Ä–∏–ª–ª, 126. https://codeforces.com/group/PVbQ8eK2T4/contest/374347/submission/151349444

–í —Å–æ—Å—Ç–∞–≤ –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏ –≤—Ö–æ–¥–∏—Ç ùëÅ –ø–ª–∞–Ω–µ—Ç. –ú–µ–∂–¥—É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –∏–∑ –Ω–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≥–∏–ø–µ—Ä–∫–∞–Ω–∞–ª—ã. –ù–æ–≤—ã–π –∏–º–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–≤–µ–ª–µ–ª, —á—Ç–æ–±—ã —Å –ª—é–±–æ–π –ø–ª–∞–Ω–µ—Ç—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ª—é–±—É—é –¥—Ä—É–≥—É—é, –ø—Ä–æ–π–¥—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –≥–∏–ø–µ—Ä–∫–∞–Ω–∞–ª. –ö–∞–Ω–∞–ª—ã —É—Å—Ç—Ä–æ–µ–Ω—ã —Ç–∞–∫, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø—Ä–æ–∫–ª–∞–¥—á–∏–∫ –≥–∏–ø–µ—Ä–∫–∞–Ω–∞–ª–æ–≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ –±–∞–∑–µ –æ–∫–æ–ª–æ –ø–ª–∞–Ω–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º ùê¥. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–∞–Ω–∞–ª–∞–º, –æ–Ω –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π. –ê –Ω–∞–ª–∏—á–∏–µ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–ª–∞–Ω–µ—Ç–∞–º–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Å–ª–æ–∂–Ω—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–∫–ª–∞–¥—á–∏–∫–∞, —á—Ç–æ–±—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã –±—ã–ª–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã, –∏ –Ω–µ –±—ã–ª–æ –±—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –ª–∏—à–Ω–∏—Ö. –í –∫–æ–Ω—Ü–µ —Å–≤–æ–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥—á–∏–∫ –¥–æ–ª–∂–µ–Ω –æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–µ–π —Ä–æ–¥–Ω–æ–π –±–∞–∑–µ, —Å –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –Ω–∞—á–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ.
 */

/* –ù—É —á—Ç–æ —Ç—É—Ç –≤–æ–æ–±—â–µ —Å–∫–∞–∑–∞—Ç—å? –ò—â–µ–º –≠–π–ª–µ—Ä–æ–≤ —Ü–∏–∫–ª.
 */

#include <iostream>
#include <vector>


namespace dst {
      class graph {
            public:
                  graph (size_t N) : graph_size (N), M(N), marked(N) {
                        for (size_t i = 0; i < N; ++i) {
                              M[i].resize(N);
                              marked[i].resize(N);
                              marked[i].resize(N);
                              marked[i][i] = true;
                        }
                  }

                  ~graph () = default;

                  void add_edge (size_t i, size_t j) { M[i][j] = 1; }

                  void euler (size_t node);
                  void print ();
            private:
                  size_t graph_size;
                  std::vector<std::vector<bool>> M;
                  std::vector<std::vector<bool>> marked;

                  std::vector<size_t> loop;
      };

      void graph::euler (size_t node) {
            size_t printed = true;

            for (size_t next = 0; next < graph_size; ++next) {
                  if (M[node][next]) {
                        if (!marked[node][next]) {
                              marked[node][next] = true;
                              
                              euler (next);
                        }
                  }
            }

            loop.push_back (node);
      }

      void graph::print () {
            for (size_t i = loop.size()-1; i != 0; --i)
                  std::cout << (loop[i]+1) << ' ' << (loop[i-1]+1) << '\n';
      }
}

int main () {
      size_t N, A;

      std::cin >> N >> A;

      dst::graph G(N);

      for (size_t i = 0; i < N; ++i)
            for (size_t j = 0; j < N; ++j) {
                  bool x;
                  std::cin >> x;
                  if (i != j)
                        if (!x)
                              G.add_edge (i, j);
            }

      G.euler (A-1);
      G.print();
}
